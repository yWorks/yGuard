plugins {
    // Apply the java and library plugin to add support for Java
    id 'java-library-distribution'
    // Apply the maven plugin to add support for publications
    id 'maven-publish'
    // Sign packages before sending them to Maven central
    id 'signing'

    // Apply yWorks coding style with editorconfig
    id 'org.ec4j.editorconfig' version '0.0.3'
}

allprojects {
    apply plugin: 'org.ec4j.editorconfig'
    version = String.format("%s.%s", VERSION_MAJOR, VERSION_MINOR)
    group = 'com.yworks'
}

repositories {
    mavenCentral()
}

configurations {
    annotation
    dependents.extendsFrom implementation
}

dependencies {
    annotation project(':annotation')
    implementation project(':annotation')
    implementation 'org.ow2.asm:asm:7.2'
    implementation 'org.apache.ant:ant:1.10.7'
    testImplementation 'junit:junit:4.13-beta-3'
}

compileJava {
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
    source = "$buildDir/generated-src"
}

task generateSources(type: Copy) {
  from 'src/main/java'
  into "$buildDir/generated-src"
  filter {
    line -> line.replaceAll('@VERSION@', version)
  }
}

// Use generated sources
compileJava.dependsOn generateSources

def LIBRARIES = ["asm-7.2.jar", "ant-1.10.7.jar"]
def LIBRARY_JARS = configurations.dependents.filter {
  file -> file.name in LIBRARIES
}

jar {
  manifest {
    attributes(
      'Class-Path': String.join(" ", *LIBRARY_JARS.collect {
        file -> file.name
      }),
      'Main-Class': 'com.yworks.yguard.YGuardLogParser'
    )
  }
}

distributions {
  bundle {
    baseName = "yguard-bundle"
    contents {
      from file("$projectDir/LICENSE")
      from file("$projectDir/README.md")
      into("examples") {
        from "$projectDir/examples"
      }
      into("lib") {
        from LIBRARY_JARS
        from configurations.annotation
        from jar
      }
      if (project.hasProperty("copy-docs")) {
        into("docs") {
          from "$projectDir/site"
        }
      }
    }
  }
}

editorconfig {
  includes = ['src/**', 'build.gradle']
  excludes = ['**/*.properties', '**/*.bits', '**/resources', '**/dist']
}

check.dependsOn editorconfigCheck

javadoc {
  source = sourceSets.main.allJava
  classpath = configurations.compileClasspath
}

task yguardSourceJar(type: Jar) {
  archiveClassifier = 'sources'
  from sourceSets.main.allJava
}

task yguardJavaDoc(type: Jar) {
  archiveClassifier = 'javadoc'
  from javadoc
}

publishing {
  repositories {
    maven {
      url 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
      credentials {
        username SONATYPE_NEXUS_USERNAME
        password SONATYPE_NEXUS_PASSWORD
      }
    }
  }
  publications {
    yguard(MavenPublication) {
      artifactId = 'yguard'

      pom {
        name = 'yguard'
        description = POM_DESCRIPTION
        url = POM_URL
        developers {
          developer {
            id = POM_DEVELOPER_ID
            name = POM_DEVELOPER_NAME
            email = POM_DEVELOPER_EMAIL
          }
        }
        scm {
          connection = POM_SCM_CONNECTION
          developerConnection = POM_SCM_DEV_CONNECTION
          url = POM_SCM_URL
        }
        licenses {
          license {
            name = POM_LICENCE_NAME
            url = POM_LICENCE_URL
          }
        }
      }

      from project.components.java
      artifact yguardSourceJar
      artifact yguardJavaDoc
    }

    annotation(MavenPublication) {
      artifactId = 'annotation'

      pom {
        name = 'annotation'
        description = POM_DESCRIPTION
        url = POM_URL
        developers {
          developer {
            id = POM_DEVELOPER_ID
            name = POM_DEVELOPER_NAME
            email = POM_DEVELOPER_EMAIL
          }
        }
        scm {
          connection = POM_SCM_CONNECTION
          developerConnection = POM_SCM_DEV_CONNECTION
          url = POM_SCM_URL
        }
        licenses {
          license {
            name = POM_LICENCE_NAME
            url = POM_LICENCE_URL
          }
        }
      }

      from project(':annotation').components.java
      artifact project(':annotation').annotationSourceJar
      artifact project(':annotation').annotationJavaDoc
    }
  }
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

signing {
  required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }
  sign publishing.publications.yguard
  sign publishing.publications.annotation
}
